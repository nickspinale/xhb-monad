-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package xhb-monad
@version 0.1

module Graphics.XHB.Monad
class Monad x => XContext x
request :: (XContext x, Request a) => a -> Connection -> x ()
requestWithReply :: (XContext x, RequestWithReply a b) => a -> Connection -> x (x (Either SomeError b))
waitXEvent :: XContext x => Connection -> x SomeEvent
pollXEvent :: XContext x => Connection -> x (Maybe SomeEvent)
newtype X m a
X :: ReaderT Connection (ExceptT SomeError m) a -> X m a
[runX] :: X m a -> ReaderT Connection (ExceptT SomeError m) a
unX :: X m a -> Connection -> m (Either SomeError a)
toX :: (Connection -> m (Either SomeError a)) -> X m a
class (XContext x, Monad m) => MonadX x m | m -> x
liftX :: MonadX x m => x a -> m a
askX :: MonadX x m => m Connection
catchErrorX :: MonadX x m => m a -> (SomeError -> m a) -> m a
throwErrorX :: MonadX x m => SomeError -> m a
asksX :: MonadX x m => (Connection -> a) -> m a
notify :: (MonadX x m, Request a) => a -> m ()
reqAsync :: (MonadX x m, RequestWithReply a b) => a -> m (m b)
req :: (MonadX x m, RequestWithReply a b) => a -> m b
pollEvent :: MonadX x m => m (Maybe SomeEvent)
waitEvent :: MonadX x m => m SomeEvent
newtype WithReply x a
WithReply :: (Connection -> x (x (Either SomeError a))) -> WithReply x a
[runWithReply] :: WithReply x a -> Connection -> x (x (Either SomeError a))
withReply :: (XContext x, RequestWithReply a b) => a -> WithReply x b
(<$-) :: (XContext x, RequestWithReply a b) => (b -> c) -> a -> WithReply x c
infixl 5 <$-
(<*-) :: (XContext x, RequestWithReply a b) => WithReply x (b -> c) -> a -> WithReply x c
infixl 5 <*-
doX :: MonadX x m => WithReply x a -> m a
instance Control.Monad.IO.Class.MonadIO m => Control.Monad.IO.Class.MonadIO (Graphics.XHB.Monad.X m)
instance GHC.Base.Monad m => GHC.Base.Monad (Graphics.XHB.Monad.X m)
instance GHC.Base.Monad m => GHC.Base.Applicative (Graphics.XHB.Monad.X m)
instance GHC.Base.Functor m => GHC.Base.Functor (Graphics.XHB.Monad.X m)
instance Graphics.XHB.Monad.XContext GHC.Types.IO
instance GHC.Base.Functor x => GHC.Base.Functor (Graphics.XHB.Monad.WithReply x)
instance GHC.Base.Monad x => GHC.Base.Applicative (Graphics.XHB.Monad.WithReply x)
instance Control.Monad.Trans.Class.MonadTrans Graphics.XHB.Monad.X
instance Graphics.XHB.Monad.XContext x => Graphics.XHB.Monad.MonadX x (Graphics.XHB.Monad.X x)
instance Control.Monad.Error.Class.MonadError e m => Control.Monad.Error.Class.MonadError e (Graphics.XHB.Monad.X m)
instance Control.Monad.Reader.Class.MonadReader r m => Control.Monad.Reader.Class.MonadReader r (Graphics.XHB.Monad.X m)
instance Control.Monad.State.Class.MonadState s m => Control.Monad.State.Class.MonadState s (Graphics.XHB.Monad.X m)
instance Control.Monad.Writer.Class.MonadWriter w m => Control.Monad.Writer.Class.MonadWriter w (Graphics.XHB.Monad.X m)
instance Graphics.XHB.Monad.MonadX x m => Graphics.XHB.Monad.MonadX x (Control.Monad.Trans.Except.ExceptT e m)
instance Graphics.XHB.Monad.MonadX x m => Graphics.XHB.Monad.MonadX x (Control.Monad.Trans.Identity.IdentityT m)
instance Graphics.XHB.Monad.MonadX x m => Graphics.XHB.Monad.MonadX x (Control.Monad.Trans.List.ListT m)
instance Graphics.XHB.Monad.MonadX x m => Graphics.XHB.Monad.MonadX x (Control.Monad.Trans.Maybe.MaybeT m)
instance Graphics.XHB.Monad.MonadX x m => Graphics.XHB.Monad.MonadX x (Control.Monad.Trans.Reader.ReaderT r m)
instance Graphics.XHB.Monad.MonadX x m => Graphics.XHB.Monad.MonadX x (Control.Monad.Trans.State.Lazy.StateT s m)
instance Graphics.XHB.Monad.MonadX x m => Graphics.XHB.Monad.MonadX x (Control.Monad.Trans.State.Strict.StateT s m)
instance (GHC.Base.Monoid w, Graphics.XHB.Monad.MonadX x m) => Graphics.XHB.Monad.MonadX x (Control.Monad.Trans.Writer.Lazy.WriterT w m)
instance (GHC.Base.Monoid w, Graphics.XHB.Monad.MonadX x m) => Graphics.XHB.Monad.MonadX x (Control.Monad.Trans.Writer.Strict.WriterT w m)
